using OneOf;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HaloScriptPreprocessor.AST
{
    public class Atom : Node, IEquatable<Atom>
    {
        public Atom(Parser.Atom source, Node? parent = null) : base(source)
        {
            _value = source;
            ParentNode = parent;
        }
        public Atom(string source, Node? parent = null) : base(null)
        {
            _value = source;
            _modified = true;
            ParentNode = parent;
        }


        private OneOf<Parser.Atom, string> _value;
        public OneOf<Parser.Atom, string> Value {
            get => _value;
            set
            {
                _value = value;
                _modified = true;
            }
        }

        /// <summary>
        /// Was the atom value created by the parser?
        /// </summary>
        public bool IsFromParser
        {
            get => Value.IsT0;
        }

        /// <summary>
        /// Was the atom value generated by a pass? 
        /// </summary>
        public bool IsGenerated
        {
            get => Value.IsT1;
        }

        private bool _modified;

        /// <summary>
        /// Was the value modified after creation?
        /// </summary>
        public bool IsModified
        {
            get => _modified;
        }

        public override uint NodeCount => 1;

        public ReadOnlySpan<char> ToSpan()
        {
            if (_value.IsT0)
                return _value.AsT0.Span;
            if (_value.IsT1)
                return _value.AsT1;
            Debug.Assert(false, "OneOf should be atom or string!");
            return new ReadOnlySpan<char>();
        }

        public override string ToString()
        {
            return _value.Match(
                parser => parser.Value,
                @string => @string
            );
        }

        override public bool Equals(object? other)
        {
            if (ReferenceEquals(this, other))
                return true;
            if (other is null)
                return false;
            if (other is Atom otherValue)
                return Equals(otherValue);
            return false;
        }
        public bool Equals(Atom? other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return ToSpan().SequenceEqual(other.ToSpan());
        }

        public override Atom Clone(Node? parent = null)
        {
            return Value.Match(parser => new Atom(parser, parent), @string => new Atom(@string, parent));
        }

        public override void Rewrite(Dictionary<Value, Value> mapping)
        {
            // nothing to do
        }

        public override int GetHashCode()
        {
            int code = 80091;
            foreach (char @char in ToSpan())
                code = code * 1664525 * @char + 1013904223;
            return code;
        }
    }
}
